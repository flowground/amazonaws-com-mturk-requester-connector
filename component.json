{
    "title": "Amazon Mechanical Turk",
    "description": "Amazon Mechanical Turk API Reference",
    "docsUrl": "https://docs.aws.amazon.com/mturk-requester/",
    "url": "https://api.apis.guru/v2/specs/amazonaws.com/mturk-requester/2017-01-17/swagger.json",
    "envVars": {},
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "https://mturk-requester.amazonaws.com/",
                    "http://mturk-requester.amazonaws.com/",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            },
            "auth_hmac": {
                "label": "Authorization (hmac)",
                "viewClass": "TextFieldView",
                "note": "Amazon Signature authorization v4"
            }
        }
    },
    "triggers": {
        "startFlow": {
            "main": "./lib/triggers/startFlow.js",
            "type": "polling",
            "title": "Start Flow",
            "fields": {}
        }
    },
    "actions": {
        "AcceptQualificationRequest": {
            "main": "./lib/actions/AcceptQualificationRequest.js",
            "title": "AcceptQualificationRequest",
            "description": " The AcceptQualificationRequest operation approves a Worker's request for a\nQualification. \n\n Only the owner of the Qualification type can grant a Qualification request for\nthat type. \n\n A successful request for the AcceptQualificationRequest operation returns with\nno errors and an empty body.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/AcceptQualificationRequest.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ApproveAssignment": {
            "main": "./lib/actions/ApproveAssignment.js",
            "title": "ApproveAssignment",
            "description": " The ApproveAssignment operation approves the results of a completed assignment. \n\n Approving an assignment initiates two payments from the Requester's Amazon.com\naccount \n\n *   The Worker who submitted the results is paid the reward specified in the\n   HIT. \n   \n   \n *   Amazon Mechanical Turk fees are debited. \n   \n   \n\n If the Requester's account does not have adequate funds for these payments, the\ncall to ApproveAssignment returns an exception, and the approval is not\nprocessed. You can include an optional feedback message with the approval, which\nthe Worker can see in the Status section of the web site. \n\n You can also call this operation for assignments that were previous rejected\nand approve them by explicitly overriding the previous rejection. This only\nworks on rejected assignments that were submitted within the previous 30 days\nand only if the assignment's related HIT has not been deleted.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ApproveAssignment.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "AssociateQualificationWithWorker": {
            "main": "./lib/actions/AssociateQualificationWithWorker.js",
            "title": "AssociateQualificationWithWorker",
            "description": " The AssociateQualificationWithWorker operation gives a Worker a Qualification. \nAssociateQualificationWithWorker does not require that the Worker submit a\nQualification request. It gives the Qualification directly to the Worker. \n\n You can only assign a Qualification of a Qualification type that you created\n(using the CreateQualificationType operation). \n\n Note: AssociateQualificationWithWorker does not affect any pending\nQualification requests for the Qualification by the Worker. If you assign a\nQualification to a Worker, then later grant a Qualification request made by the\nWorker, the granting of the request may modify the Qualification score. To\nresolve a pending Qualification request without affecting the Qualification the\nWorker already has, reject the request with the RejectQualificationRequest \noperation.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/AssociateQualificationWithWorker.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateAdditionalAssignmentsForHIT": {
            "main": "./lib/actions/CreateAdditionalAssignmentsForHIT.js",
            "title": "CreateAdditionalAssignmentsForHIT",
            "description": " The CreateAdditionalAssignmentsForHIT operation increases the maximum number of\nassignments of an existing HIT. \n\n To extend the maximum number of assignments, specify the number of additional\nassignments.\n\n *  HITs created with fewer than 10 assignments cannot be extended to have 10 or\n   more assignments. Attempting to add assignments in a way that brings the\n   total number of assignments for a HIT from fewer than 10 assignments to 10 or\n   more assignments will result in an \n   AWS.MechanicalTurk.InvalidMaximumAssignmentsIncrease exception.\n   \n   \n *  HITs that were created before July 22, 2015 cannot be extended. Attempting\n   to extend HITs that were created before July 22, 2015 will result in an \n   AWS.MechanicalTurk.HITTooOldForExtension exception.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateAdditionalAssignmentsForHIT.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateHIT": {
            "main": "./lib/actions/CreateHIT.js",
            "title": "CreateHIT",
            "description": "The CreateHIT operation creates a new Human Intelligence Task (HIT). The new HIT\nis made available for Workers to find and accept on the Amazon Mechanical Turk\nwebsite. \n\n This operation allows you to specify a new HIT by passing in values for the\nproperties of the HIT, such as its title, reward amount and number of\nassignments. When you pass these values to CreateHIT, a new HIT is created for\nyou, with a new HITTypeID. The HITTypeID can be used to create additional HITs\nin the future without needing to specify common parameters such as the title,\ndescription and reward amount each time.\n\n An alternative way to create HITs is to first generate a HITTypeID using the \nCreateHITType operation and then call the CreateHITWithHITType operation. This\nis the recommended best practice for Requesters who are creating large numbers\nof HITs. \n\nCreateHIT also supports several ways to provide question data: by providing a\nvalue for the Question parameter that fully specifies the contents of the HIT,\nor by providing a HitLayoutId and associated HitLayoutParameters. \n\n If a HIT is created with 10 or more maximum assignments, there is an additional\nfee. For more information, see Amazon Mechanical Turk Pricing\n[https://requester.mturk.com/pricing].",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateHIT.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateHITType": {
            "main": "./lib/actions/CreateHITType.js",
            "title": "CreateHITType",
            "description": " The <code>CreateHITType</code> operation creates a new HIT type. This operation allows you to define a standard set of HIT properties to use when creating HITs. If you register a HIT type with values that match an existing HIT type, the HIT type ID of the existing type will be returned. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateHITType.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateHITWithHITType": {
            "main": "./lib/actions/CreateHITWithHITType.js",
            "title": "CreateHITWithHITType",
            "description": " The CreateHITWithHITType operation creates a new Human Intelligence Task (HIT)\nusing an existing HITTypeID generated by the CreateHITType operation. \n\n This is an alternative way to create HITs from the CreateHIT operation. This is\nthe recommended best practice for Requesters who are creating large numbers of\nHITs. \n\nCreateHITWithHITType also supports several ways to provide question data: by\nproviding a value for the Question parameter that fully specifies the contents\nof the HIT, or by providing a HitLayoutId and associated HitLayoutParameters. \n\n If a HIT is created with 10 or more maximum assignments, there is an additional\nfee. For more information, see Amazon Mechanical Turk Pricing\n[https://requester.mturk.com/pricing].",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateHITWithHITType.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateQualificationType": {
            "main": "./lib/actions/CreateQualificationType.js",
            "title": "CreateQualificationType",
            "description": " The <code>CreateQualificationType</code> operation creates a new Qualification type, which is represented by a <code>QualificationType</code> data structure. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateQualificationType.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateWorkerBlock": {
            "main": "./lib/actions/CreateWorkerBlock.js",
            "title": "CreateWorkerBlock",
            "description": "The <code>CreateWorkerBlock</code> operation allows you to prevent a Worker from working on your HITs. For example, you can block a Worker who is producing poor quality work. You can block up to 100,000 Workers.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateWorkerBlock.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteHIT": {
            "main": "./lib/actions/DeleteHIT.js",
            "title": "DeleteHIT",
            "description": " The DeleteHIT operation is used to delete HIT that is no longer needed. Only\nthe Requester who created the HIT can delete it. \n\n You can only dispose of HITs that are in the Reviewable state, with all of\ntheir submitted assignments already either approved or rejected. If you call the\nDeleteHIT operation on a HIT that is not in the Reviewable state (for example,\nthat has not expired, or still has active assignments), or on a HIT that is\nReviewable but without all of its submitted assignments already approved or\nrejected, the service will return an error. \n\n *   HITs are automatically disposed of after 120 days. \n   \n   \n *   After you dispose of a HIT, you can no longer approve the HIT's rejected\n   assignments. \n   \n   \n *   Disposed HITs are not returned in results for the ListHITs operation. \n   \n   \n *   Disposing HITs can improve the performance of operations such as\n   ListReviewableHITs and ListHITs.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteHIT.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteQualificationType": {
            "main": "./lib/actions/DeleteQualificationType.js",
            "title": "DeleteQualificationType",
            "description": " The DeleteQualificationType deletes a Qualification type and deletes any HIT\ntypes that are associated with the Qualification type. \n\nThis operation does not revoke Qualifications already assigned to Workers\nbecause the Qualifications might be needed for active HITs. If there are any\npending requests for the Qualification type, Amazon Mechanical Turk rejects\nthose requests. After you delete a Qualification type, you can no longer use it\nto create HITs or HIT types.\n\nDeleteQualificationType must wait for all the HITs that use the deleted\nQualification type to be deleted before completing. It may take up to 48 hours\nbefore DeleteQualificationType completes and the unique name of the\nQualification type is available for reuse with CreateQualificationType.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteQualificationType.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteWorkerBlock": {
            "main": "./lib/actions/DeleteWorkerBlock.js",
            "title": "DeleteWorkerBlock",
            "description": "The <code>DeleteWorkerBlock</code> operation allows you to reinstate a blocked Worker to work on your HITs. This operation reverses the effects of the CreateWorkerBlock operation. You need the Worker ID to use this operation. If the Worker ID is missing or invalid, this operation fails and returns the message \"WorkerId is invalid.\" If the specified Worker is not blocked, this operation returns successfully.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteWorkerBlock.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DisassociateQualificationFromWorker": {
            "main": "./lib/actions/DisassociateQualificationFromWorker.js",
            "title": "DisassociateQualificationFromWorker",
            "description": " The DisassociateQualificationFromWorker revokes a previously granted\nQualification from a user. \n\n You can provide a text message explaining why the Qualification was revoked.\nThe user who had the Qualification can see this message.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DisassociateQualificationFromWorker.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetAccountBalance": {
            "main": "./lib/actions/GetAccountBalance.js",
            "title": "GetAccountBalance",
            "description": "The <code>GetAccountBalance</code> operation retrieves the amount of money in your Amazon Mechanical Turk account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetAccountBalance.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetAssignment": {
            "main": "./lib/actions/GetAssignment.js",
            "title": "GetAssignment",
            "description": " The <code>GetAssignment</code> operation retrieves the details of the specified Assignment. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetAssignment.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetFileUploadURL": {
            "main": "./lib/actions/GetFileUploadURL.js",
            "title": "GetFileUploadURL",
            "description": " The <code>GetFileUploadURL</code> operation generates and returns a temporary URL. You use the temporary URL to retrieve a file uploaded by a Worker as an answer to a FileUploadAnswer question for a HIT. The temporary URL is generated the instant the GetFileUploadURL operation is called, and is valid for 60 seconds. You can get a temporary file upload URL any time until the HIT is disposed. After the HIT is disposed, any uploaded files are deleted, and cannot be retrieved. Pending Deprecation on December 12, 2017. The Answer Specification structure will no longer support the <code>FileUploadAnswer</code> element to be used for the QuestionForm data structure. Instead, we recommend that Requesters who want to create HITs asking Workers to upload files to use Amazon S3. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetFileUploadURL.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetHIT": {
            "main": "./lib/actions/GetHIT.js",
            "title": "GetHIT",
            "description": " The <code>GetHIT</code> operation retrieves the details of the specified HIT. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetHIT.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetQualificationScore": {
            "main": "./lib/actions/GetQualificationScore.js",
            "title": "GetQualificationScore",
            "description": " The GetQualificationScore operation returns the value of a Worker's\nQualification for a given Qualification type. \n\n To get a Worker's Qualification, you must know the Worker's ID. The Worker's ID\nis included in the assignment data returned by the ListAssignmentsForHIT \noperation. \n\nOnly the owner of a Qualification type can query the value of a Worker's\nQualification of that type.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetQualificationScore.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetQualificationType": {
            "main": "./lib/actions/GetQualificationType.js",
            "title": "GetQualificationType",
            "description": " The <code>GetQualificationType</code>operation retrieves information about a Qualification type using its ID. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetQualificationType.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListAssignmentsForHIT": {
            "main": "./lib/actions/ListAssignmentsForHIT.js",
            "title": "ListAssignmentsForHIT",
            "description": " The ListAssignmentsForHIT operation retrieves completed assignments for a HIT.\nYou can use this operation to retrieve the results for a HIT. \n\n You can get assignments for a HIT at any time, even if the HIT is not yet\nReviewable. If a HIT requested multiple assignments, and has received some\nresults but has not yet become Reviewable, you can still retrieve the partial\nresults with this operation. \n\n Use the AssignmentStatus parameter to control which set of assignments for a\nHIT are returned. The ListAssignmentsForHIT operation can return submitted\nassignments awaiting approval, or it can return assignments that have already\nbeen approved or rejected. You can set AssignmentStatus=Approved,Rejected to get\nassignments that have already been approved and rejected together in one result\nset. \n\n Only the Requester who created the HIT can retrieve the assignments for that\nHIT. \n\n Results are sorted and divided into numbered pages and the operation returns a\nsingle page of results. You can use the parameters of the operation to control\nsorting and pagination.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListAssignmentsForHIT.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListBonusPayments": {
            "main": "./lib/actions/ListBonusPayments.js",
            "title": "ListBonusPayments",
            "description": " The <code>ListBonusPayments</code> operation retrieves the amounts of bonuses you have paid to Workers for a given HIT or assignment. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListBonusPayments.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListHITs": {
            "main": "./lib/actions/ListHITs.js",
            "title": "ListHITs",
            "description": " The <code>ListHITs</code> operation returns all of a Requester's HITs. The operation returns HITs of any status, except for HITs that have been deleted of with the DeleteHIT operation or that have been auto-deleted. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListHITs.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListHITsForQualificationType": {
            "main": "./lib/actions/ListHITsForQualificationType.js",
            "title": "ListHITsForQualificationType",
            "description": " The <code>ListHITsForQualificationType</code> operation returns the HITs that use the given Qualification type for a Qualification requirement. The operation returns HITs of any status, except for HITs that have been deleted with the <code>DeleteHIT</code> operation or that have been auto-deleted. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListHITsForQualificationType.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListQualificationRequests": {
            "main": "./lib/actions/ListQualificationRequests.js",
            "title": "ListQualificationRequests",
            "description": " The <code>ListQualificationRequests</code> operation retrieves requests for Qualifications of a particular Qualification type. The owner of the Qualification type calls this operation to poll for pending requests, and accepts them using the AcceptQualification operation. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListQualificationRequests.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListQualificationTypes": {
            "main": "./lib/actions/ListQualificationTypes.js",
            "title": "ListQualificationTypes",
            "description": " The <code>ListQualificationTypes</code> operation returns a list of Qualification types, filtered by an optional search term. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListQualificationTypes.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListReviewPolicyResultsForHIT": {
            "main": "./lib/actions/ListReviewPolicyResultsForHIT.js",
            "title": "ListReviewPolicyResultsForHIT",
            "description": " The <code>ListReviewPolicyResultsForHIT</code> operation retrieves the computed results and the actions taken in the course of executing your Review Policies for a given HIT. For information about how to specify Review Policies when you call CreateHIT, see Review Policies. The ListReviewPolicyResultsForHIT operation can return results for both Assignment-level and HIT-level review results. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListReviewPolicyResultsForHIT.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListReviewableHITs": {
            "main": "./lib/actions/ListReviewableHITs.js",
            "title": "ListReviewableHITs",
            "description": " The <code>ListReviewableHITs</code> operation retrieves the HITs with Status equal to Reviewable or Status equal to Reviewing that belong to the Requester calling the operation. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListReviewableHITs.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListWorkerBlocks": {
            "main": "./lib/actions/ListWorkerBlocks.js",
            "title": "ListWorkerBlocks",
            "description": "The <code>ListWorkersBlocks</code> operation retrieves a list of Workers who are blocked from working on your HITs.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListWorkerBlocks.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListWorkersWithQualificationType": {
            "main": "./lib/actions/ListWorkersWithQualificationType.js",
            "title": "ListWorkersWithQualificationType",
            "description": " The <code>ListWorkersWithQualificationType</code> operation returns all of the Workers that have been associated with a given Qualification type. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListWorkersWithQualificationType.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "NotifyWorkers": {
            "main": "./lib/actions/NotifyWorkers.js",
            "title": "NotifyWorkers",
            "description": " The <code>NotifyWorkers</code> operation sends an email to one or more Workers that you specify with the Worker ID. You can specify up to 100 Worker IDs to send the same message with a single call to the NotifyWorkers operation. The NotifyWorkers operation will send a notification email to a Worker only if you have previously approved or rejected work from the Worker. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/NotifyWorkers.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "RejectAssignment": {
            "main": "./lib/actions/RejectAssignment.js",
            "title": "RejectAssignment",
            "description": " The RejectAssignment operation rejects the results of a completed assignment. \n\n You can include an optional feedback message with the rejection, which the\nWorker can see in the Status section of the web site. When you include a\nfeedback message with the rejection, it helps the Worker understand why the\nassignment was rejected, and can improve the quality of the results the Worker\nsubmits in the future. \n\n Only the Requester who created the HIT can reject an assignment for the HIT.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/RejectAssignment.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "RejectQualificationRequest": {
            "main": "./lib/actions/RejectQualificationRequest.js",
            "title": "RejectQualificationRequest",
            "description": " The RejectQualificationRequest operation rejects a user's request for a\nQualification. \n\n You can provide a text message explaining why the request was rejected. The\nWorker who made the request can see this message.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/RejectQualificationRequest.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "SendBonus": {
            "main": "./lib/actions/SendBonus.js",
            "title": "SendBonus",
            "description": " The <code>SendBonus</code> operation issues a payment of money from your account to a Worker. This payment happens separately from the reward you pay to the Worker when you approve the Worker's assignment. The SendBonus operation requires the Worker's ID and the assignment ID as parameters to initiate payment of the bonus. You must include a message that explains the reason for the bonus payment, as the Worker may not be expecting the payment. Amazon Mechanical Turk collects a fee for bonus payments, similar to the HIT listing fee. This operation fails if your account does not have enough funds to pay for both the bonus and the fees. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/SendBonus.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "SendTestEventNotification": {
            "main": "./lib/actions/SendTestEventNotification.js",
            "title": "SendTestEventNotification",
            "description": " The <code>SendTestEventNotification</code> operation causes Amazon Mechanical Turk to send a notification message as if a HIT event occurred, according to the provided notification specification. This allows you to test notifications without setting up notifications for a real HIT type and trying to trigger them using the website. When you call this operation, the service attempts to send the test notification immediately. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/SendTestEventNotification.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateExpirationForHIT": {
            "main": "./lib/actions/UpdateExpirationForHIT.js",
            "title": "UpdateExpirationForHIT",
            "description": " The <code>UpdateExpirationForHIT</code> operation allows you update the expiration time of a HIT. If you update it to a time in the past, the HIT will be immediately expired. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateExpirationForHIT.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateHITReviewStatus": {
            "main": "./lib/actions/UpdateHITReviewStatus.js",
            "title": "UpdateHITReviewStatus",
            "description": " The <code>UpdateHITReviewStatus</code> operation updates the status of a HIT. If the status is Reviewable, this operation can update the status to Reviewing, or it can revert a Reviewing HIT back to the Reviewable status. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateHITReviewStatus.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateHITTypeOfHIT": {
            "main": "./lib/actions/UpdateHITTypeOfHIT.js",
            "title": "UpdateHITTypeOfHIT",
            "description": " The <code>UpdateHITTypeOfHIT</code> operation allows you to change the HITType properties of a HIT. This operation disassociates the HIT from its old HITType properties and associates it with the new HITType properties. The HIT takes on the properties of the new HITType in place of the old ones. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateHITTypeOfHIT.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateNotificationSettings": {
            "main": "./lib/actions/UpdateNotificationSettings.js",
            "title": "UpdateNotificationSettings",
            "description": " The <code>UpdateNotificationSettings</code> operation creates, updates, disables or re-enables notifications for a HIT type. If you call the UpdateNotificationSettings operation for a HIT type that already has a notification specification, the operation replaces the old specification with a new one. You can call the UpdateNotificationSettings operation to enable or disable notifications for the HIT type, without having to modify the notification specification itself by providing updates to the Active status without specifying a new notification specification. To change the Active status of a HIT type's notifications, the HIT type must already have a notification specification, or one must be provided in the same call to <code>UpdateNotificationSettings</code>. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateNotificationSettings.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateQualificationType": {
            "main": "./lib/actions/UpdateQualificationType.js",
            "title": "UpdateQualificationType",
            "description": " The UpdateQualificationType operation modifies the attributes of an existing\nQualification type, which is represented by a QualificationType data structure.\nOnly the owner of a Qualification type can modify its attributes. \n\n Most attributes of a Qualification type can be changed after the type has been\ncreated. However, the Name and Keywords fields cannot be modified. The\nRetryDelayInSeconds parameter can be modified or added to change the delay or to\nenable retries, but RetryDelayInSeconds cannot be used to disable retries. \n\n You can use this operation to update the test for a Qualification type. The\ntest is updated based on the values specified for the Test,\nTestDurationInSeconds and AnswerKey parameters. All three parameters specify the\nupdated test. If you are updating the test for a type, you must specify the Test\nand TestDurationInSeconds parameters. The AnswerKey parameter is optional;\nomitting it specifies that the updated test does not have an answer key. \n\n If you omit the Test parameter, the test for the Qualification type is\nunchanged. There is no way to remove a test from a Qualification type that has\none. If the type already has a test, you cannot update it to be AutoGranted. If\nthe Qualification type does not have a test and one is provided by an update,\nthe type will henceforth have a test. \n\n If you want to update the test duration or answer key for an existing test\nwithout changing the questions, you must specify a Test parameter with the\noriginal questions, along with the updated values. \n\n If you provide an updated Test but no AnswerKey, the new test will not have an\nanswer key. Requests for such Qualifications must be granted manually. \n\n You can also update the AutoGranted and AutoGrantedValue attributes of the\nQualification type.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateQualificationType.in.json",
                "out": {
                    "type": "object"
                }
            }
        }
    }
}